def incrementVersion() {
    def versionPropertiesFile = rootProject.file('version.properties')

    if (versionPropertiesFile.exists()) {
        def versionProperties = new Properties()

        versionPropertiesFile.withReader('UTF-8') { reader ->
            versionProperties.load(reader)
        }

        def versionCode = versionProperties['versionCode'].toInteger() + 1  // Increment versionCode
        def versionNameTokens = versionProperties['versionName'].split("\\.")
        // Assuming your version name follows the format MAJOR.MINOR.PATCH
        def majorVersion = versionNameTokens[0]
        def minorVersion = versionNameTokens[1]
        def patchVersion = versionNameTokens[2].toInteger() + 1  // Increment patchVersion

        def versionName = majorVersion + "." + minorVersion + "." + patchVersion

        versionProperties['versionCode'] = versionCode.toString()
        versionProperties['versionName'] = versionName

        versionPropertiesFile.withWriter('UTF-8') { writer ->
            versionProperties.store(writer, null)
        }
    } else {
        throw new GradleException("Version properties file not found.")
    }
}
incrementVersion() // Call the function here

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def versionProperties = new Properties()
def versionPropertiesFile = rootProject.file('version.properties')
if (versionPropertiesFile.exists()) {
    versionPropertiesFile.withReader('UTF-8') { reader ->
        versionProperties.load(reader)
    }
}

def flutterVersionCode = versionProperties['versionCode']
def flutterVersionName = versionProperties['versionName']

println "Flutter Version Code: $flutterVersionCode"
println "Flutter Version Name: $flutterVersionName"

if (flutterVersionCode == null || flutterVersionCode.isEmpty()) {
    throw new GradleException("Flutter version code not found. Define flutter.versionCode in the local.properties file.")
}

if (flutterVersionName == null || flutterVersionName.isEmpty()) {
    throw new GradleException("Flutter version name not found. Define flutter.versionName in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.startupdevmm.pmxpress"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion  33 //was 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.google.android.material:material:1.6.0'
    implementation "androidx.multidex:multidex:2.0.1"
    implementation group: 'com.google.android.material', name: 'material', version: '1.6.1'
}
